#!/bin/bash

# set -x

scriptdir=$(dirname "$(readlink -f "$0")")
scriptname=$(readlink -f "$0")

if [[ -n "$(which docker-compose)" ]];
then
  DOCKER_COMPOSE=docker-compose
else
  if docker compose >/dev/null 2>/dev/null
  then
    DOCKER_COMPOSE="docker compose"
  else
    echo "Error: Missing 'docker compose' or 'docker-compose'" 1>&2
    exit 1
  fi
fi

[[ -d $HOME/bin ]] && [[ ! -e $HOME/bin/lsmb-dev ]] && ln -s $scriptname $HOME/bin/lsmb-dev
if [ -f $scriptdir/.local/.env ]; then
    source $scriptdir/.local/.env
fi

export COMPOSE_PROJECT_NAME=ld$1
shift

_CWD=$(dirname $(perl -e "use Cwd qw(realpath); print realpath '$0'"))

BROWSER=${BROWSER:-chrome}
BROWSERS_COUNT=${BROWSERS_COUNT:-5}
export HOME_DEV=${HOME_DEV:-$PWD/.local}

# Make sure that $HOME_DEV exists
if [ ! -d $HOME_DEV ]; then
    mkdir $HOME_DEV
fi

if [ ! -f $scriptdir/selenium/docker-compose-${BROWSER}.yml ]; then
  echo "Unconfigured browser $BROWSER. Please define $_CWD/selenium/docker-compose-${BROWSER}.yml"
  exit
fi

# define a log output function
show_logs() { # shows the last 5 minutes of logs for the lsmb container
    cat <<-EOF

	======================================

	EOF

    sleep 5; # need a little time for the logs to get updated unfortunately
    docker logs --since $(( `date "+%s"` - (5*60) )) "${COMPOSE_PROJECT_NAME}_lsmb";

    cat <<-EOF

	======================================

	EOF

}

is_container_running() {
    local z;
    z=`docker ps --filter "status=running" --filter="name=${COMPOSE_PROJECT_NAME}_lsmb" --quiet 2>/dev/null`;
    test -n "$z";
}

show_result() {
    local DBPort
    local HostPort
    local IpAddr_db
    local IpAddr_host
    local IpAddr_mailhog
    local IpAddr_lsmb
    local IpAddr_proxy

    # report the IP address in the form of URLs
    DBPort=`docker inspect --format='{{(index (index .NetworkSettings.Ports "5432/tcp") 0).HostPort}}' "${COMPOSE_PROJECT_NAME}_db"`
    HostPort=`docker inspect --format='{{(index (index .NetworkSettings.Ports "80/tcp") 0).HostPort}}' "${COMPOSE_PROJECT_NAME}_proxy"`
    IpAddr_host=`hostname`
    IpAddr_db=`docker inspect -f "{{.NetworkSettings.Networks.${COMPOSE_PROJECT_NAME}_default.IPAddress}}" "${COMPOSE_PROJECT_NAME}_db"`
    IpAddr_mailhog=`docker inspect -f "{{.NetworkSettings.Networks.${COMPOSE_PROJECT_NAME}_default.IPAddress}}" "${COMPOSE_PROJECT_NAME}_mailhog"`
    Port_mailhog=`docker inspect --format='{{(index (index .NetworkSettings.Ports "8025/tcp") 0).HostPort}}' "${COMPOSE_PROJECT_NAME}_mailhog"`
    IpAddr_proxy=`docker inspect -f "{{.NetworkSettings.Networks.${COMPOSE_PROJECT_NAME}_default.IPAddress}}" "${COMPOSE_PROJECT_NAME}_proxy"`
    IpAddr_lsmb=`docker inspect -f "{{.NetworkSettings.Networks.${COMPOSE_PROJECT_NAME}_default.IPAddress}}" "${COMPOSE_PROJECT_NAME}_lsmb"`
    Port_lsmb=`docker inspect --format='{{(index (index .NetworkSettings.Ports "9000/tcp") 0).HostPort}}' "${COMPOSE_PROJECT_NAME}_lsmb"`

    cat <<-EOF
	======================================
	== LedgerSMB '$CurrentBranch'
	== should be available at
	======================================
	host         : http://${IpAddr_host}:${HostPort}
	mailhog      : http://${IpAddr_host}:${Port_mailhog}
	dev (login)* : http://${IpAddr_host}:${Port_lsmb}/login.pl
	dev (setup)* : http://${IpAddr_host}:${Port_lsmb}/setup.pl
	db           : postgresql://${IpAddr_host}:${DBPort}
	
	mailhog      : http://${IpAddr_mailhog}:8025
	psgi         : http://${IpAddr_lsmb}:5762
	proxy (login): http://${IpAddr_proxy}/login.pl
	proxy (setup): http://${IpAddr_proxy}/setup.pl
	dev (login)* : http://${IpAddr_lsmb}:9000/login.pl
	dev (setup)* : http://${IpAddr_lsmb}:9000/setup.pl
	db           : postgresql://${IpAddr_db}:5432
	======================================
	* Only available if 'make serve' is running.	
	EOF
}


# Check we are actually in a LedgerSMB repo
DirName=`git rev-parse --show-toplevel`; # retrieve the git toplevel dir
CurrentBranch=`git rev-parse --abbrev-ref HEAD`
if ! test -r "${DirName}/lib/LedgerSMB.pm"; then
    cat <<-EOF
	========================================
	== ERROR  ERROR  ERROR  ERROR  ERROR  ==
	========================================
	== You don't appear to be running me  ==
	== from a valid LedgerSMB repository  ==
	========================================

	EOF
    exit 9
fi

# Check for a local (non repo) version of the yml file
if test -r $_CWD/docker-compose-local.yml; then
    F="$_CWD/docker-compose-local.yml"
else
    F="$_CWD/docker-compose.yml"
fi

SCALE=""
if test "$1" = "up" ; then
    SCALE="--scale $BROWSER=$BROWSERS_COUNT"
elif test "$1" = "status" ; then
    if is_container_running ; then
        show_result
        exit 0
    else
        echo "No container running"
        exit 1
    fi
fi

# generate and start the containers
USER="$(id -u):$(id -g)" $DOCKER_COMPOSE \
    -f "$F" \
    -f $_CWD/selenium/docker-compose.yml \
    -f $_CWD/selenium/docker-compose-$BROWSER.yml \
    "$@" $SCALE

if test "$1" = "start" -o "$1" = "restart" -o "$1" = "up" ; then
  # don't try to report the ip and url if the command is one of
  # pull, rm, stop,

  if is_container_running; then
      show_result
  else
      show_logs
  fi
elif test "$1" = "rm"; then
  # Remove networks
  docker network rm ${COMPOSE_PROJECT_NAME}_default
  docker network rm ${COMPOSE_PROJECT_NAME}_grid
  docker network rm ${COMPOSE_PROJECT_NAME}_internal
fi

if ! test -e Makefile.local ; then
    cat >Makefile.local <<-EOF
	CONTAINER=${COMPOSE_PROJECT_NAME}_lsmb
	#PHERKIN_EXTRA_OPTS=--theme=light
	#DOCKER_CMD=
	#PHERKIN_OPTS=

	EOF

    echo "Created Makefile.local causing e.g. 'make test' to run in the container"
else
    if test -z "`grep ${COMPOSE_PROJECT_NAME}_lsmb Makefile.local`" ; then
        echo "'Makefile.local' missing reference to container '${COMPOSE_PROJECT_NAME}_lsmb\nplease update it manually"
    fi
fi
